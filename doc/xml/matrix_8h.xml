<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="matrix_8h" kind="file" language="C++">
    <compoundname>matrix.h</compoundname>
    <includedby refid="matrix_8c" local="yes">matrix.c</includedby>
    <includedby refid="test__matrix_8c" local="yes">test_matrix.c</includedby>
    <invincdepgraph>
      <node id="54">
        <label>test_matrix.c</label>
        <link refid="test__matrix_8c"/>
      </node>
      <node id="53">
        <label>matrix.c</label>
        <link refid="matrix_8c"/>
      </node>
      <node id="52">
        <label>matrix.h</label>
        <link refid="matrix.h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmatrix" prot="public">matrix</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="matrix_8h_1aaf4919968b31b42a399d749719bbe126" prot="public" static="no">
        <name>ELM</name>
        <param><defname>m</defname></param>
        <param><defname>col</defname></param>
        <param><defname>row</defname></param>
        <initializer>(m-&gt;v[(m-&gt;ncols*row)+col])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.h" line="25" column="9" bodyfile="matrix.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" prot="public" static="no">
        <type>struct <ref refid="structmatrix" kindref="compound">matrix</ref></type>
        <definition>typedef struct matrix  matrix_t</definition>
        <argsstring></argsstring>
        <name>matrix_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.h" line="23" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="matrix_8h_1ada5cab59dea5fc74a2146285abf2e468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
        <definition>matrix_t* matrix_new</definition>
        <argsstring>(int columns, int rows)</argsstring>
        <name>matrix_new</name>
        <param>
          <type>int</type>
          <declname>columns</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <briefdescription>
<para>Create a new matrix. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>columns - The number of columns in the matrix </para></listitem>
<listitem><para>rows - The number of rows in the matrix. <simplesect kind="return"><para>A new matric that must be deleted with <ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del()</ref>. </para></simplesect>
<simplesect kind="warning"><para>Don&apos;t free() instances of <ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref>. You&apos;ll be leaving dangling pointers inside. </para></simplesect>
</para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.h" line="27" column="1" bodyfile="matrix.c" bodystart="35" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8h_1a8277c0c702668ac9c20d5b4fbbb1c805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_del</definition>
        <argsstring>(matrix_t *m)</argsstring>
        <name>matrix_del</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Delete a matrix. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>m - The matrix to be deleted<itemizedlist>
<listitem><para>Matrices can be created with other functions than <ref refid="matrix_8c_1ada5cab59dea5fc74a2146285abf2e468" kindref="member">matrix_new()</ref>.</para></listitem><listitem><para>In general, if the called function returns a pointer to a <ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref>, that matrix must be deleted with this destructor function. </para></listitem></itemizedlist>
</para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.h" line="28" column="1" bodyfile="matrix.c" bodystart="58" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8h_1a734238400aafc2b5dbc5cd3d56cd9d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
        <definition>matrix_t* matrix_get_col_vector</definition>
        <argsstring>(matrix_t *m, int col_no)</argsstring>
        <name>matrix_get_col_vector</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col_no</declname>
        </param>
        <briefdescription>
<para>Extract a column vector from a matrix. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>m - The matrix from which to extract the column </para></listitem>
<listitem><para>col_no - The column number to extract. Starts with 0. <simplesect kind="return"><para>A new vector of type <ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> that must be deleted with <ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del()</ref>. </para></simplesect>
</para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.h" line="29" column="1" bodyfile="matrix.c" bodystart="73" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8h_1a2bf3c116d7c23979b805934c18d9d3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_set_col</definition>
        <argsstring>(matrix_t *m, int col_no,...)</argsstring>
        <name>matrix_set_col</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col_no</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Set the column col_no in m. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>m - The matrix to maniplulate. </para></listitem>
<listitem><para>col_no - The column that we wish to set </para></listitem>
<listitem><para>... - The values<itemizedlist>
<listitem><para>The argument list must contain one entry for each rown in m.</para></listitem><listitem><para>There is no way to check this without cluttering up the code. </para></listitem></itemizedlist>
</para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.h" line="30" column="1" bodyfile="matrix.c" bodystart="93" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8h_1a1e8d8c0421f716763d5bbb5c39af0e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
        <definition>matrix_t* matrix_mul</definition>
        <argsstring>(matrix_t *m1, matrix_t *m2)</argsstring>
        <name>matrix_mul</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>multiply m1 x m2 </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>This function is used as a &apos;workhorse&apos; for kinematic functions.</para></listitem><listitem><para>The result must be deleted with <ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del()</ref>. <simplesect kind="return"><para>A new matrix that must be deleted with <ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del()</ref>. </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.h" line="31" column="1" bodyfile="matrix.c" bodystart="203" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8h_1a6e2e142638d18a26b372e1fe1ad719f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_set</definition>
        <argsstring>(matrix_t *m, int col, int row, double v)</argsstring>
        <name>matrix_set</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>double</type>
          <declname>v</declname>
          <defname>d</defname>
        </param>
        <briefdescription>
<para>Set the element at column col and row row in m to d. </para>        </briefdescription>
        <detaileddescription>
<para>-Same as ELM the macro hack, but a lot safer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.h" line="32" column="1" bodyfile="matrix.c" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8h_1ae6a0f841c360812a20dd2f43a7be3d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* matrix_get</definition>
        <argsstring>(matrix_t *m, int col, int row)</argsstring>
        <name>matrix_get</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Return a pointer to the element at col, row in m. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>The array containing this element is maintained by matrix_t, so don&apos;t try to delete this. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.h" line="33" column="1" bodyfile="matrix.c" bodystart="121" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8h_1a57c33c823cc314048ff5ffd206a7fd27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_printf</definition>
        <argsstring>(char *format, matrix_t *m)</argsstring>
        <name>matrix_printf</name>
        <param>
          <type>char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Print the contents of matrix m using format. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>format - Passed on to printf(). </para></listitem>
<listitem><para>m - The matrix to print.<itemizedlist>
<listitem><para>Typically, you&apos;d use &quot;%2.1f &quot; (note the space). </para></listitem></itemizedlist>
</para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.h" line="34" column="1" bodyfile="matrix.c" bodystart="134" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8h_1af1e14df979d46d4f11464f83f4e6ee22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
        <definition>matrix_t* matrix_rol2r</definition>
        <argsstring>(matrix_t *m, double theta)</argsstring>
        <name>matrix_rol2r</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.h" line="35" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>matrix.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2017<sp/>-<sp/>Jan<sp/>Atle<sp/>Ramsli</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="structmatrix" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmatrix" kindref="compound">matrix</ref><sp/>{</highlight></codeline>
<codeline lineno="21" refid="structmatrix_1a53e53380c64d2dcc85486da7f90794d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmatrix_1a53e53380c64d2dcc85486da7f90794d5" kindref="member">nrows</ref>,<sp/><ref refid="structmatrix_1a7c4b990ebe8d2c098f3974f6ffe0c9b4" kindref="member">ncols</ref>;</highlight></codeline>
<codeline lineno="22" refid="structmatrix_1a18edff6f6f8cc7071adfd9bc826378ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="structmatrix_1a18edff6f6f8cc7071adfd9bc826378ef" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}<sp/><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="matrix_8h_1aaf4919968b31b42a399d749719bbe126" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ELM(m,<sp/>col,<sp/>row)<sp/>(m-&gt;v[(m-&gt;ncols*row)+col])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/><ref refid="matrix_8h_1ada5cab59dea5fc74a2146285abf2e468" kindref="member">matrix_new</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>columns,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="matrix_8h_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/><ref refid="matrix_8h_1a734238400aafc2b5dbc5cd3d56cd9d60" kindref="member">matrix_get_col_vector</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col_no);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="matrix_8h_1a2bf3c116d7c23979b805934c18d9d3fd" kindref="member">matrix_set_col</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col_no,<sp/>...);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/><ref refid="matrix_8h_1a1e8d8c0421f716763d5bbb5c39af0e5b" kindref="member">matrix_mul</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m1,<sp/><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m2);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="matrix_8h_1a6e2e142638d18a26b372e1fe1ad719f4" kindref="member">matrix_set</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structmatrix_1a18edff6f6f8cc7071adfd9bc826378ef" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><ref refid="matrix_8h_1ae6a0f841c360812a20dd2f43a7be3d9e" kindref="member">matrix_get</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="matrix_8h_1a57c33c823cc314048ff5ffd206a7fd27" kindref="member">matrix_printf</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>format,<sp/><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/><ref refid="matrix_8h_1af1e14df979d46d4f11464f83f4e6ee22" kindref="member">matrix_rol2r</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta);</highlight></codeline>
    </programlisting>
    <location file="matrix.h"/>
  </compounddef>
</doxygen>
