<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="matrix_8c" kind="file" language="C++">
    <compoundname>matrix.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="matrix_8h" local="yes">matrix.h</includes>
    <incdepgraph>
      <node id="46">
        <label>stdarg.h</label>
      </node>
      <node id="47">
        <label>assert.h</label>
      </node>
      <node id="45">
        <label>stdlib.h</label>
      </node>
      <node id="43">
        <label>matrix.c</label>
        <link refid="matrix.c"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>matrix.h</label>
        <link refid="matrix_8h"/>
      </node>
      <node id="48">
        <label>math.h</label>
      </node>
      <node id="44">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="matrix_8c_1ada5cab59dea5fc74a2146285abf2e468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
        <definition>matrix_t* matrix_new</definition>
        <argsstring>(int columns, int rows)</argsstring>
        <name>matrix_new</name>
        <param>
          <type>int</type>
          <declname>columns</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <briefdescription>
<para>Create a new matrix. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>columns - The number of columns in the matrix </para></listitem>
<listitem><para>rows - The number of rows in the matrix. <simplesect kind="return"><para>A new matric that must be deleted with <ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del()</ref>. </para></simplesect>
<simplesect kind="warning"><para>Don&apos;t free() instances of <ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref>. You&apos;ll be leaving dangling pointers inside. </para></simplesect>
</para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.c" line="35" column="1" bodyfile="matrix.c" bodystart="35" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_del</definition>
        <argsstring>(matrix_t *m)</argsstring>
        <name>matrix_del</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Delete a matrix. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>m - The matrix to be deleted<itemizedlist>
<listitem><para>Matrices can be created with other functions than <ref refid="matrix_8c_1ada5cab59dea5fc74a2146285abf2e468" kindref="member">matrix_new()</ref>.</para></listitem><listitem><para>In general, if the called function returns a pointer to a <ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref>, that matrix must be deleted with this destructor function. </para></listitem></itemizedlist>
</para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.c" line="58" column="1" bodyfile="matrix.c" bodystart="58" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8c_1a734238400aafc2b5dbc5cd3d56cd9d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
        <definition>matrix_t* matrix_get_col_vector</definition>
        <argsstring>(matrix_t *m, int col_no)</argsstring>
        <name>matrix_get_col_vector</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col_no</declname>
        </param>
        <briefdescription>
<para>Extract a column vector from a matrix. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>m - The matrix from which to extract the column </para></listitem>
<listitem><para>col_no - The column number to extract. Starts with 0. <simplesect kind="return"><para>A new vector of type <ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> that must be deleted with <ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del()</ref>. </para></simplesect>
</para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.c" line="73" column="1" bodyfile="matrix.c" bodystart="73" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8c_1a2bf3c116d7c23979b805934c18d9d3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_set_col</definition>
        <argsstring>(matrix_t *m, int col_no,...)</argsstring>
        <name>matrix_set_col</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col_no</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Set the column col_no in m. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>m - The matrix to maniplulate. </para></listitem>
<listitem><para>col_no - The column that we wish to set </para></listitem>
<listitem><para>... - The values<itemizedlist>
<listitem><para>The argument list must contain one entry for each rown in m.</para></listitem><listitem><para>There is no way to check this without cluttering up the code. </para></listitem></itemizedlist>
</para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.c" line="93" column="1" bodyfile="matrix.c" bodystart="93" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8c_1a066269f1cf8e31cee35781be055b541f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_set</definition>
        <argsstring>(matrix_t *m, int col, int row, double d)</argsstring>
        <name>matrix_set</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Set the element at column col and row row in m to d. </para>        </briefdescription>
        <detaileddescription>
<para>-Same as ELM the macro hack, but a lot safer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.c" line="111" column="1" bodyfile="matrix.c" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8c_1ae6a0f841c360812a20dd2f43a7be3d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* matrix_get</definition>
        <argsstring>(matrix_t *m, int col, int row)</argsstring>
        <name>matrix_get</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Return a pointer to the element at col, row in m. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>The array containing this element is maintained by matrix_t, so don&apos;t try to delete this. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.c" line="121" column="1" bodyfile="matrix.c" bodystart="121" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8c_1a57c33c823cc314048ff5ffd206a7fd27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_printf</definition>
        <argsstring>(char *format, matrix_t *m)</argsstring>
        <name>matrix_printf</name>
        <param>
          <type>char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Print the contents of matrix m using format. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>format - Passed on to printf(). </para></listitem>
<listitem><para>m - The matrix to print.<itemizedlist>
<listitem><para>Typically, you&apos;d use &quot;%2.1f &quot; (note the space). </para></listitem></itemizedlist>
</para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.c" line="134" column="1" bodyfile="matrix.c" bodystart="134" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8c_1a2e2541f2040177403b95e30f38b232fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
        <definition>matrix_t* matrix_rot_x</definition>
        <argsstring>(matrix_t *m, double theta)</argsstring>
        <name>matrix_rot_x</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>Rotate a matrix around x-axis. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="bug_1_bug000001"><xreftitle>Bug</xreftitle><xrefdescription><para>Create x,y,z static rotation matrices to avoid alloc/free<itemizedlist>
<listitem><para>The result must be deleted with <ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del()</ref> </para></listitem></itemizedlist>
</para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.c" line="151" column="1" bodyfile="matrix.c" bodystart="151" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8c_1a46cb2680dc432e6ca1f23642d26afd6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
        <definition>matrix_t* matrix_rot_y</definition>
        <argsstring>(matrix_t *m, double theta)</argsstring>
        <name>matrix_rot_y</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>Rotate a matrix around y-axis. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>The result must be deleted with <ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del()</ref>: </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.c" line="168" column="1" bodyfile="matrix.c" bodystart="168" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8c_1ae56ed57fcad52b8a9d4cabe736331e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
        <definition>matrix_t* matrix_rot_z</definition>
        <argsstring>(matrix_t *m, double theta)</argsstring>
        <name>matrix_rot_z</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>Rotate a matrix around z-axis. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>The result must be deleted with <ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del()</ref>: </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.c" line="184" column="1" bodyfile="matrix.c" bodystart="184" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="matrix_8c_1a1e8d8c0421f716763d5bbb5c39af0e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
        <definition>matrix_t* matrix_mul</definition>
        <argsstring>(matrix_t *m1, matrix_t *m2)</argsstring>
        <name>matrix_mul</name>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="matrix_8h_1a423f7a3e32c1f6d72e65d605ea5e6f5f" kindref="member">matrix_t</ref> *</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>multiply m1 x m2 </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>This function is used as a &apos;workhorse&apos; for kinematic functions.</para></listitem><listitem><para>The result must be deleted with <ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del()</ref>. <simplesect kind="return"><para>A new matrix that must be deleted with <ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del()</ref>. </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix.c" line="203" column="1" bodyfile="matrix.c" bodystart="203" bodyend="229"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>matrix.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2017<sp/>-<sp/>Jan<sp/>Atle<sp/>Ramsli</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="matrix_8h" kindref="compound">matrix.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/><ref refid="matrix_8c_1ada5cab59dea5fc74a2146285abf2e468" kindref="member">matrix_new</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>columns,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>rv<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmatrix" kindref="compound">matrix_t</ref>));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>rv){</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;matrix_new:-<sp/>malloc()<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>rv-&gt;<ref refid="structmatrix_1a7c4b990ebe8d2c098f3974f6ffe0c9b4" kindref="member">ncols</ref><sp/>=<sp/>columns;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>rv-&gt;<ref refid="structmatrix_1a53e53380c64d2dcc85486da7f90794d5" kindref="member">nrows</ref><sp/>=<sp/>rows;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>rv-&gt;<ref refid="structmatrix_1a18edff6f6f8cc7071adfd9bc826378ef" kindref="member">v</ref><sp/>=<sp/>calloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),<sp/>columns<sp/>*<sp/>rows);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>rv){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;matrix_new:-<sp/>calloc()<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m-&gt;<ref refid="structmatrix_1a18edff6f6f8cc7071adfd9bc826378ef" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>free(m-&gt;<ref refid="structmatrix_1a18edff6f6f8cc7071adfd9bc826378ef" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>free(m);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/><ref refid="matrix_8c_1a734238400aafc2b5dbc5cd3d56cd9d60" kindref="member">matrix_get_col_vector</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col_no){</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m-&gt;<ref refid="structmatrix_1a7c4b990ebe8d2c098f3974f6ffe0c9b4" kindref="member">ncols</ref>&lt;col_no);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>rv<sp/>=<sp/><ref refid="matrix_8c_1ada5cab59dea5fc74a2146285abf2e468" kindref="member">matrix_new</ref>(1,<sp/>m-&gt;<ref refid="structmatrix_1a53e53380c64d2dcc85486da7f90794d5" kindref="member">nrows</ref>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m-&gt;<ref refid="structmatrix_1a53e53380c64d2dcc85486da7f90794d5" kindref="member">nrows</ref>;<sp/>i<sp/>+=<sp/>m-&gt;<ref refid="structmatrix_1a7c4b990ebe8d2c098f3974f6ffe0c9b4" kindref="member">ncols</ref>){</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rv-&gt;<ref refid="structmatrix_1a18edff6f6f8cc7071adfd9bc826378ef" kindref="member">v</ref>++=m-&gt;<ref refid="structmatrix_1a18edff6f6f8cc7071adfd9bc826378ef" kindref="member">v</ref>[i];</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="matrix_8c_1a2bf3c116d7c23979b805934c18d9d3fd" kindref="member">matrix_set_col</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col_no,<sp/>...)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(col_no<sp/>&lt;<sp/>m-&gt;ncols);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(ap,<sp/>col_no);<sp/></highlight><highlight class="comment">//Requires<sp/>the<sp/>last<sp/>fixed<sp/>parameter<sp/>(to<sp/>get<sp/>the<sp/>address)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(row=0;<sp/>row&lt;m-&gt;<ref refid="structmatrix_1a53e53380c64d2dcc85486da7f90794d5" kindref="member">nrows</ref>;<sp/>row++){</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmatrix_1a18edff6f6f8cc7071adfd9bc826378ef" kindref="member">v</ref>[(row*m-&gt;<ref refid="structmatrix_1a7c4b990ebe8d2c098f3974f6ffe0c9b4" kindref="member">ncols</ref>)<sp/>+<sp/>col_no]=va_arg(ap,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="matrix_8c_1a066269f1cf8e31cee35781be055b541f" kindref="member">matrix_set</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d){</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(col&lt;m-&gt;ncols);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(row&lt;m-&gt;nrows);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmatrix_1a18edff6f6f8cc7071adfd9bc826378ef" kindref="member">v</ref>[(m-&gt;<ref refid="structmatrix_1a7c4b990ebe8d2c098f3974f6ffe0c9b4" kindref="member">ncols</ref>*row)<sp/>+<sp/>col]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><ref refid="matrix_8c_1ae6a0f841c360812a20dd2f43a7be3d9e" kindref="member">matrix_get</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row){</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(col&lt;m-&gt;ncols);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(row&lt;m-&gt;nrows);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m-&gt;<ref refid="structmatrix_1a18edff6f6f8cc7071adfd9bc826378ef" kindref="member">v</ref><sp/>+<sp/>(m-&gt;<ref refid="structmatrix_1a7c4b990ebe8d2c098f3974f6ffe0c9b4" kindref="member">ncols</ref>*row)<sp/>+<sp/>col;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="matrix_8c_1a57c33c823cc314048ff5ffd206a7fd27" kindref="member">matrix_printf</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>format,<sp/><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m){</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m-&gt;<ref refid="structmatrix_1a53e53380c64d2dcc85486da7f90794d5" kindref="member">nrows</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m-&gt;<ref refid="structmatrix_1a7c4b990ebe8d2c098f3974f6ffe0c9b4" kindref="member">ncols</ref>;<sp/>j++){</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(format,<sp/>m-&gt;<ref refid="structmatrix_1a18edff6f6f8cc7071adfd9bc826378ef" kindref="member">v</ref>[(i<sp/>*<sp/>m-&gt;<ref refid="structmatrix_1a7c4b990ebe8d2c098f3974f6ffe0c9b4" kindref="member">ncols</ref>)<sp/>+<sp/>j]);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/><ref refid="matrix_8c_1a2e2541f2040177403b95e30f38b232fe" kindref="member">matrix_rot_x</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta){</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>rv;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>rm;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>value,<sp/>rotation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>rm<sp/>=<sp/><ref refid="matrix_8c_1ada5cab59dea5fc74a2146285abf2e468" kindref="member">matrix_new</ref>(3,3);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix_8c_1a2bf3c116d7c23979b805934c18d9d3fd" kindref="member">matrix_set_col</ref>(rm,<sp/>0,<sp/>1.0,<sp/>0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix_8c_1a2bf3c116d7c23979b805934c18d9d3fd" kindref="member">matrix_set_col</ref>(rm,<sp/>1,<sp/>0.0,<sp/>cos(theta),<sp/>-sin(theta));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix_8c_1a2bf3c116d7c23979b805934c18d9d3fd" kindref="member">matrix_set_col</ref>(rm,<sp/>2,<sp/>0.0,<sp/>sin(theta),<sp/>cos(theta));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/><ref refid="matrix_8c_1a1e8d8c0421f716763d5bbb5c39af0e5b" kindref="member">matrix_mul</ref>(rm,<sp/>m);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del</ref>(rm);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/><ref refid="matrix_8c_1a46cb2680dc432e6ca1f23642d26afd6c" kindref="member">matrix_rot_y</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta){</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>rv;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>rm;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>value,<sp/>rotation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>rm<sp/>=<sp/><ref refid="matrix_8c_1ada5cab59dea5fc74a2146285abf2e468" kindref="member">matrix_new</ref>(3,3);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix_8c_1a2bf3c116d7c23979b805934c18d9d3fd" kindref="member">matrix_set_col</ref>(rm,<sp/>0,<sp/>cos(theta),<sp/>0.0,<sp/>-sin(theta));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix_8c_1a2bf3c116d7c23979b805934c18d9d3fd" kindref="member">matrix_set_col</ref>(rm,<sp/>1,<sp/>0.0,<sp/>1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix_8c_1a2bf3c116d7c23979b805934c18d9d3fd" kindref="member">matrix_set_col</ref>(rm,<sp/>2,<sp/>sin(theta),<sp/>0.0,<sp/>cos(theta));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/><ref refid="matrix_8c_1a1e8d8c0421f716763d5bbb5c39af0e5b" kindref="member">matrix_mul</ref>(rm,<sp/>m);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del</ref>(rm);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/><ref refid="matrix_8c_1ae56ed57fcad52b8a9d4cabe736331e06" kindref="member">matrix_rot_z</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta){</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>rv;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>rm;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>value,<sp/>rotation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>rm<sp/>=<sp/><ref refid="matrix_8c_1ada5cab59dea5fc74a2146285abf2e468" kindref="member">matrix_new</ref>(3,3);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix_8c_1a2bf3c116d7c23979b805934c18d9d3fd" kindref="member">matrix_set_col</ref>(rm,<sp/>0,<sp/>cos(theta),<sp/>sin(theta),<sp/>0.0);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix_8c_1a2bf3c116d7c23979b805934c18d9d3fd" kindref="member">matrix_set_col</ref>(rm,<sp/>1,<sp/>-sin(theta),<sp/>cos(theta),<sp/>0.0);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix_8c_1a2bf3c116d7c23979b805934c18d9d3fd" kindref="member">matrix_set_col</ref>(rm,<sp/>2,<sp/>0.0,<sp/>0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/><ref refid="matrix_8c_1a1e8d8c0421f716763d5bbb5c39af0e5b" kindref="member">matrix_mul</ref>(rm,<sp/>m);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix_8c_1a8277c0c702668ac9c20d5b4fbbb1c805" kindref="member">matrix_del</ref>(rm);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/><ref refid="matrix_8c_1a1e8d8c0421f716763d5bbb5c39af0e5b" kindref="member">matrix_mul</ref>(<ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m1,<sp/><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>m2)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/>col;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmatrix" kindref="compound">matrix_t</ref>*<sp/>rv;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col2;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m1-&gt;<ref refid="structmatrix_1a7c4b990ebe8d2c098f3974f6ffe0c9b4" kindref="member">ncols</ref>==m2-&gt;<ref refid="structmatrix_1a53e53380c64d2dcc85486da7f90794d5" kindref="member">nrows</ref>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/><ref refid="matrix_8c_1ada5cab59dea5fc74a2146285abf2e468" kindref="member">matrix_new</ref>(m2-&gt;<ref refid="structmatrix_1a7c4b990ebe8d2c098f3974f6ffe0c9b4" kindref="member">ncols</ref>,<sp/>m1-&gt;<ref refid="structmatrix_1a53e53380c64d2dcc85486da7f90794d5" kindref="member">nrows</ref>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>row1,<sp/>first<sp/>col2<sp/>-&gt;<sp/>first<sp/>row3,<sp/>first<sp/>col3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>row1,<sp/>second<sp/>col2<sp/>-&gt;first<sp/>row3,<sp/>second<sp/>col3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>row1,<sp/>third<sp/>col2<sp/>-&gt;first<sp/>row3,<sp/>third<sp/>col3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Second<sp/>row1,<sp/>first<sp/>col2-&gt;second<sp/>row3,<sp/>first<sp/>col3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Second<sp/>row1,<sp/>second<sp/>col2-&gt;second<sp/>row3,<sp/>second<sp/>col3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Second<sp/>row1,<sp/>third<sp/>col2-&gt;second<sp/>row3,<sp/>third<sp/>col3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Third<sp/>row1,<sp/>first<sp/>col2-&gt;third<sp/>row3,<sp/>first<sp/>col3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>et<sp/>cetera</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>m1-&gt;<ref refid="structmatrix_1a53e53380c64d2dcc85486da7f90794d5" kindref="member">nrows</ref>;<sp/>row<sp/>++){</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(col2=0;<sp/>col2&lt;m2-&gt;<ref refid="structmatrix_1a7c4b990ebe8d2c098f3974f6ffe0c9b4" kindref="member">ncols</ref>;col2++){<sp/><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>m1-&gt;<ref refid="structmatrix_1a7c4b990ebe8d2c098f3974f6ffe0c9b4" kindref="member">ncols</ref>;<sp/>col++){</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix_8h_1aaf4919968b31b42a399d749719bbe126" kindref="member">ELM</ref>(rv,<sp/>col2,<sp/>row)<sp/>+=<sp/>(<ref refid="matrix_8h_1aaf4919968b31b42a399d749719bbe126" kindref="member">ELM</ref>(m1,<sp/>col,<sp/>row)<sp/>*<sp/><ref refid="matrix_8h_1aaf4919968b31b42a399d749719bbe126" kindref="member">ELM</ref>(m2,<sp/>col2,<sp/>col));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="matrix.c"/>
  </compounddef>
</doxygen>
