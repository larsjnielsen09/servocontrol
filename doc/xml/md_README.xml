<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="md_README" kind="page">
    <compoundname>md_README</compoundname>
    <title>README</title>
    <detaileddescription>
<para><heading level="1">Hello, fellow robotics learners</heading>
</para><para>For those of us who are on a budget, have brain-sized balls (or ball-sized brains, depending on POV), and/or plan to control the robot from an embedded system (or any combination thereof), I&apos;ve been trying to implement some of the MATLAB functionality in C.<linebreak/>
 I&apos;ts work in progress, dudes. Forward and reverse kinematics will be coming any day now.<linebreak/>
 Feel free to contribute, but don&apos;t improve <ref refid="matrix_8c_1a1e8d8c0421f716763d5bbb5c39af0e5b" kindref="member">matrix_mul()</ref> unless you really, really, really, really know what you&apos;re doing - I pulled my hair out to make that beast work.</para><para>To compile, type make at the $ prompt<linebreak/>
 $ make</para><para><heading level="2">matrix</heading>
</para><para><ref refid="matrix_8c" kindref="compound">matrix.c</ref> contains enough maxtrix operations to get through the course, then adding whatever is necessary to get a Chinese 6DOF robot arm working with TowerPro MG996R servos.<linebreak/>
 The low-level stuff will be in <ref refid="servoctl_8c" kindref="compound">servoctl.c</ref>.<linebreak/>
</para><para>To use the matrix operations, include <ref refid="matrix_8h" kindref="compound">matrix.h</ref>.<linebreak/>
</para><para><computeroutput></computeroutput></para><para><computeroutput>/* Let&apos;s multiply two matrices, m x m2 and store the product in m3 */ #include &quot;matrix.h&quot;</computeroutput></para><para><computeroutput>/* 1. Declare the three matrices you&apos;ll be using. */ <verbatim>matrix_t* m = matrix_new(3,3); /* Create a 3x3 matrix */
matrix_t* m2 = matrix_new(1,3);/* Create a 1x3 matrix */
matrix_t* m3;
</verbatim></computeroutput></para><para><computeroutput>/* 2. Put some values in m and m2 */ <verbatim>matrix_set_col(m,0, 1.0, 2.0, 3.0);
matrix_set_col(m,1, 4.0, 5.0, 6.0);
matrix_set_col(m,2, 7.0, 8.0, 9.0);

matrix_set_col(m2,0, 1.0, 2.0, 3.0);

/* Print it */
matrix_printf(&quot;%2.0f &quot;, m);
printf(&quot;*\n&quot;);
matrix_printf(&quot;%2.0f &quot;, m2);
printf(&quot;=\n&quot;);
</verbatim></computeroutput></para><para><computeroutput>/* 3. Multiply them and print the result */ <verbatim>m3 = matrix_mul(m, m2);
matrix_printf(&quot;%2.0f &quot;, m3);
</verbatim></computeroutput></para><para><computeroutput>/* 4. Clean up, and you&apos;re done. */ matrix_del(m2); matrix_del(m3);</computeroutput></para><para><computeroutput> matrix_del(m); </computeroutput></para><para><heading level="2">Servoctl</heading>
</para><para>Contains low-level routines for dealing with servos and the Adafruit servo controller. </para>    </detaileddescription>
  </compounddef>
</doxygen>
